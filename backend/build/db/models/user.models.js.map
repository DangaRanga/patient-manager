{"version":3,"sources":["../../../src/db/models/user.models.js"],"names":["UserSchema","mongoose","Schema","firstName","type","String","required","lastName","password","email","lowercase","unique","validate","validator","validationStr","test","message","ip_address","requred","role","UserModel","model","pre","isModified","bcrypt","genSalt","salt","hash","passwordHash"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACrCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,qBAAP;AAFD,GAD0B;AAMrCC,EAAAA,QAAQ,EAAE;AACRH,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,oBAAP;AAFF,GAN2B;AAWrCE,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,mBAAP;AAFF,GAX2B;AAgBrCG,EAAAA,KAAK,EAAE;AACLL,IAAAA,IAAI,EAAEC,MADD;AAELK,IAAAA,SAAS,EAAE,IAFN;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,aAAV,EAAyB;AAClC,eAAO,gDAAgDC,IAAhD,CACLD,aADK,CAAP;AAGD,OALO;AAMRE,MAAAA,OAAO,EAAE;AAND,KAJL;AAYLV,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,gBAAP;AAZL,GAhB8B;AA+BrCW,EAAAA,UAAU,EAAE;AACVb,IAAAA,IAAI,EAAEC,MADI;AAEVa,IAAAA,OAAO,EAAE;AAFC,GA/ByB;AAoCrCC,EAAAA,IAAI,EAAE;AACJf,IAAAA,IAAI,EAAEC,MADF;AAEJK,IAAAA,SAAS,EAAE,IAFP;AAGJ,YAAM,CAAC,SAAD,EAAY,QAAZ;AAHF;AApC+B,CAApB,CAAnB;;;AA2CA,IAAMU,SAAS,GAAGnB,qBAASoB,KAAT,CAAe,MAAf,EAAuBrB,UAAvB,CAAlB,C,CAEA;;;;AACAA,UAAU,CAACsB,GAAX,CAAe,MAAf,6FAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEjB,KAAKC,UAAL,CAAgB,UAAhB,CAFiB;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAGAC,mBAAOC,OAAP,EAHA;;AAAA;AAGbC,UAAAA,IAHa;AAAA;AAAA,iBAIQF,mBAAOG,IAAP,CAAY,KAAKnB,QAAjB,EAA2BkB,IAA3B,CAJR;;AAAA;AAIbE,UAAAA,YAJa;AAKnB,eAAKpB,QAAL,GAAgBoB,YAAhB;;AALmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import mongoose from \"mongoose\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  firstName: {\r\n    type: String,\r\n    required: [true, \"First Name Required\"],\r\n  },\r\n\r\n  lastName: {\r\n    type: String,\r\n    required: [true, \"Last Name Required\"],\r\n  },\r\n\r\n  password: {\r\n    type: String,\r\n    required: [true, \"Password Required\"],\r\n  },\r\n\r\n  email: {\r\n    type: String,\r\n    lowercase: true,\r\n    unique: true,\r\n    validate: {\r\n      validator: function (validationStr) {\r\n        return /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(\r\n          validationStr\r\n        );\r\n      },\r\n      message: \"Please enter a valid email\",\r\n    },\r\n    required: [true, \"Email required\"],\r\n  },\r\n\r\n  ip_address: {\r\n    type: String,\r\n    requred: true,\r\n  },\r\n\r\n  role: {\r\n    type: String,\r\n    lowercase: true,\r\n    enum: [\"patient\", \"doctor\"],\r\n  },\r\n});\r\n\r\nconst UserModel = mongoose.model(\"User\", UserSchema);\r\n\r\n// Prehook to Hash and Salt Password before saving\r\nUserSchema.pre(\"save\", async function () {\r\n  // Create the password hash\r\n  if (this.isModified(\"password\")) {\r\n    const salt = await bcrypt.genSalt();\r\n    const passwordHash = await bcrypt.hash(this.password, salt);\r\n    this.password = passwordHash;\r\n  }\r\n});\r\n\r\nexport { UserModel, UserSchema };\r\n"],"file":"user.models.js"}