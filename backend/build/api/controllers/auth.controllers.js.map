{"version":3,"sources":["../../../src/api/controllers/auth.controllers.js"],"names":["AuthController","registerUser","request","response","body","firstName","lastName","email","password","role","UserModel","findOne","userExists","status","json","message","userDetails","ip_address","connection","remoteAddress","errorResponse","err","succesResponse","success","newPatient","PatientModel","save","newDoctor","DoctorModel","create","error","loginUser","user","passwordMatch","token","jwt","sign","id","_id","process","env","SECRET_KEY","expiresIn","authToken","checkTokenValidity","header","isValidToken","verifiedUser","verify","findById"],"mappings":"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","sourcesContent":["// Node module import\r\nimport http from \"http\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { compare } from \"bcrypt\";\r\n\r\n// Model imports\r\nimport { UserModel } from \"../../db/models/user.models\";\r\nimport { PatientModel } from \"../../db/models/patient.models\";\r\nimport { DoctorModel } from \"../../db/models/doctor.models\";\r\n\r\n// Helper Function imports\r\nimport { requestHandler } from \"../../helpers/handlers\";\r\n\r\nconst AuthController = {\r\n  async registerUser(request, response) {\r\n    // Destructure request body\r\n    const { firstName, lastName, email, password, role } = request.body;\r\n\r\n    // Validation checks\r\n\r\n    // Check if the user already exists\r\n    try {\r\n      const userExists = await UserModel.findOne({ email: email });\r\n      if (userExists) {\r\n        return response.status(400).json({\r\n          message: \"An account with this email address already exists\",\r\n        });\r\n      }\r\n\r\n      // Initialize key variables\r\n      const userDetails = {\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        email: email,\r\n        password: password,\r\n        role: role,\r\n        ip_address: request.connection.remoteAddress,\r\n      };\r\n\r\n      const errorResponse = response\r\n        .status(400)\r\n        .json({ err: `Error saving ${role} ${err.message}` });\r\n\r\n      const succesResponse = response\r\n        .status(201)\r\n        .json({ success: `${role} Successfully saved` });\r\n\r\n      if (role == \"patient\") {\r\n        // Attempt to save new patient to database\r\n        const newPatient = new PatientModel(userDetails);\r\n        newPatient.save((err) => {\r\n          if (err) {\r\n            return errorResponse;\r\n          } else {\r\n            return succesResponse;\r\n          }\r\n        });\r\n      } else if (role === \"doctor\") {\r\n        // Attempt to save new doctor to database\r\n        const newDoctor = DoctorModel.create(userDetails);\r\n\r\n        newDoctor.save((err) => {\r\n          if (err) {\r\n            return errorResponse;\r\n          } else {\r\n            return succesResponse;\r\n          }\r\n        });\r\n      } else {\r\n        return response.status(400).json({ err: \"No User role specified\" });\r\n      }\r\n    } catch (err) {\r\n      return response.status(500).json({ error: err.message });\r\n    }\r\n  },\r\n\r\n  async loginUser(request, response) {\r\n    // Extract credentials from request\r\n    const { email, password } = request.body;\r\n\r\n    // Perform Validation checks\r\n\r\n    // Check if the user exists\r\n    try {\r\n      const user = await UserModel.findOne({ email: email });\r\n      if (!user) {\r\n        return response.status(400).json({\r\n          message: \"No user exists with the email entered\",\r\n        });\r\n      }\r\n\r\n      // Check passwords with bcrypt\r\n      const passwordMatch = await compare(password, user.password);\r\n      if (!passwordMatch) {\r\n        return response.status(401).json({\r\n          message: \"Invalid Password\",\r\n        });\r\n      }\r\n\r\n      // Create the JWT\r\n      const token = jwt.sign({ id: user._id }, process.env.SECRET_KEY, {\r\n        expiresIn: 900,\r\n      });\r\n\r\n      return response.status(200).json({\r\n        authToken: token,\r\n        user: {\r\n          id: user._id,\r\n          email: user.email,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      return response.status(500).json({ error: err.message });\r\n    }\r\n  },\r\n\r\n  async checkTokenValidity(request, response) {\r\n    try {\r\n      // Check for the token\r\n      const token = request.header(\"x-access-token\");\r\n      if (!token) {\r\n        return response.json({\r\n          message: \"Token is missing\",\r\n          isValidToken: false,\r\n        });\r\n      }\r\n\r\n      // Check if the token is still valid\r\n      const verifiedUser = jwt.verify(token, process.env.SECRET_KEY);\r\n      if (!verifiedUser) {\r\n        return response.json({\r\n          message: \"Token is invalid\",\r\n          isValidToken: false,\r\n        });\r\n      }\r\n\r\n      // Check if the token belongs to the user\r\n      const user = await UserModel.findById(verifiedUser.id);\r\n\r\n      if (!user) {\r\n        return response.json({ isValidToken: false });\r\n      }\r\n\r\n      return response.status(200).json({ isValidToken: true });\r\n    } catch (err) {\r\n      return response.status(500).json({ error: err.message });\r\n    }\r\n  },\r\n};\r\n\r\nexport { AuthController };\r\n"],"file":"auth.controllers.js"}